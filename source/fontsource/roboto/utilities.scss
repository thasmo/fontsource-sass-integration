@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:string';
@use 'sass:meta';

@use 'metadata' as font;

$name: font.$name !default;
$styles: map.get(font.$defaults, style) !default;
$weights: map.get(font.$defaults, weight) !default;
$subsets: (map.get(font.$defaults, subset)) !default;
$axes: null !default;
$stretch: null !default;
$suffix: null !default;
$declarations: null !default;

@function style($axis, $fallback) {
	@if ($axis == all or $axis == slnt) and map.has-key(font.$axes, slnt) {
		@return oblique map.get(font.$axes, slnt, min) + deg map.get(font.$axes, slnt, max) + deg;
	} @else if (meta.type-of($axis) == 'map') {
		@return oblique map.get($axis, min) + deg map.get($axis, max) + deg;
	} @else {
		@return $fallback;
	}
}

@function weight($axis, $fallback) {
	@if ($axis == all or $axis == wght) and map.has-key(font.$axes, wght) {
		@return map.get(font.$axes, wght, min) map.get(font.$axes, wght, max);
	} @else if (meta.type-of($axis) == 'map') {
		@return map.get($axis, min) map.get($axis, max);
	} @else {
		@return $fallback;
	}
}

@function stretch($axis, $fallback) {
	@if ($axis == all or $axis == wdth) and map.has-key(font.$axes, wdth) {
		@return math.percentage(math.div(map.get(font.$axes, wdth, min), 100)) math.percentage(math.div(map.get(font.$axes, wdth, max), 100));
	} @else if (meta.type-of($axis) == 'map') {
		@return math.percentage(math.div(map.get($axis, min), 100)) math.percentage(math.div(map.get($axis, wdth, max), 100));
	} @else {
		@return $fallback;
	}
}

@function variation($axis) {
	@if ($axis == all or $axis == ital) and map.has-key(font.$axes, ital) {
		@return 'ital' 1;
	} @else if meta.type-of($axis) == 'map' {
		@return 'ital' map.get($axis, max);
	}

	@return null;
}

@function glyphs($glyphs) {
	@if meta.type-of($glyphs) == list {
		@return $glyphs;
	} @else if map.has-key(font.$subsets, $glyphs) {
		@return map.get(font.$subsets, $glyphs);
	}

	@return null;
}

@function source(
	$axis: all,
	$subset: map.get(font.$defaults, subset),
	$style: map.get(font.$defaults, style),
	$weight: map.get(font.$defaults, weight),
) {
	@if (($axis == all and list.length(map.keys(font.$axes)) > 0) or map.has-key(font.$axes, $axis)) {
		@return
			url('#{path($axis: $axis, $style: $style, $subset: $subset, $format: woff2)}') format('woff2 supports variations'),
			url('#{path($axis: $axis, $style: $style, $subset: $subset, $format: woff2)}') format('woff2-variations');
	} @else {
		@return
			url('#{path($weight: $weight, $style: $style, $subset: $subset, $format: woff2)}') format('woff2'),
			url('#{path($weight: $weight, $style: $style, $subset: all, $format: woff)}') format('woff');
	}
}

@function path(
	$axis: null,
	$format: woff2,
	$weight: map.get(font.$defaults, weight),
	$style: map.get(font.$defaults, style),
	$subset: map.get(font.$defaults, subset),
	$identifier: font.$identifier,
	$base: font.$directory,
) {
	@if $axis {
		@return '#{$base}/#{$identifier}-#{$subset}-variable-#{if($axis == all, 'full', $axis + 'Only')}-#{$style}.woff2';
	} @else {
		@return '#{$base}/#{$identifier}-#{$subset}-#{$weight}-#{$style}.#{$format}';
	}
}

@mixin face(
	$name: null,
	$style: null,
	$weight: null,
	$stretch: null,
	$variation: null,
	$glyphs: null,
	$source: null,
	$declarations: null,
) {
	@font-face {
		font-family: $name;
		font-style: $style;
		font-weight: $weight;
		font-stretch: $stretch;
		font-variation-settings: $variation;

		@each $property, $value in $declarations {
			#{$property}: $value;
		}

		unicode-range: $glyphs;
		src: $source;
	}
}

@mixin faces(
	$name: $name,
	$styles: $styles,
	$weights: $weights,
	$subsets: $subsets,
	$axes: $axes,
	$stretch: $stretch,
	$suffix: $suffix,
	$declarations: $declarations,
) {
	@each $axis, $metrics in $axes {
		@each $style in if($axis, map.get(font.$defaults, style), if($styles == all, font.$styles, $styles)) {
			@each $weight in (if($axis, map.get(font.$defaults, weight), (if($weights == all, font.$weights, $weights)))) {
				@each $subset, $glyphs in (if($subsets == all, map.keys(font.$subsets), $subsets)) {
					/* #{$name, $style, $weight} (Subset: #{$subset}, Axis: #{$axis}) */
					@include face(
						$name: string.quote(#{$name if($axis, $suffix, null)}),
						$style: style(if($axis == slnt and $metrics, $metrics, $axis), $style),
						$weight: weight(if($axis == slnt and $metrics, $metrics, $axis), $weight),
						$stretch: stretch(if($axis == wdth and $metrics, $metrics, $axis), $stretch),
						$variation: variation(if($axis == ital and $metrics, $metrics, $axis)),
						$declarations: $declarations,
						$glyphs: glyphs(if($glyphs, $glyphs, $subset)),
						$source: source($axis, $subset, $style, $weight),
					);
				}
			}
		}
	}
}
